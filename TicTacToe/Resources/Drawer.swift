//
//  Drawer.swift
//  TicTacToe
//
//  Created by Kevin Rejko on 9/25/17.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Drawer : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawX(lightGreen: UIColor = UIColor(red: 0.576, green: 0.678, blue: 0.639, alpha: 0.800), darkGreen: UIColor = UIColor(red: 0.396, green: 0.494, blue: 0.455, alpha: 0.800), rect: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), leftLinePercent: CGFloat = 1, showLeftLine: Bool = false, rightLinePercent: CGFloat = 1, showRightLine: Bool = false, xStrokeWidth: CGFloat = 12) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let xScale: CGFloat = rect.width / 60.0
        let yScale: CGFloat = rect.height / 60.0

        //// Frames
        let frame = CGRect(x: 0, y: 1, width: rect.width, height: rect.height)


        //// Group


        //// Symbol Drawing
        context.saveGState()
        context.rotate(by: 45 * CGFloat.pi/180)
        context.scaleBy(x: xScale, y: yScale)

        let symbolRect = CGRect(x: 5.43, y: -37.46, width: 74, height: 74)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Drawer.drawXSymbol(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, lightGreen: lightGreen, darkGreen: darkGreen, rect: CGRect(x: 0, y: 0, width: 60, height: 60), leftLinePercent: leftLinePercent, showLeftLine: showLeftLine, rightLinePercent: rightLinePercent, showRightLine: showRightLine, xStrokeWidth: xStrokeWidth)
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawO(gray: UIColor = UIColor(red: 0.400, green: 0.400, blue: 0.400, alpha: 1.000), rect: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), oStrokeWidth: CGFloat = 15, oLinePercent: CGFloat = 0.544, oBuffer: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let halfOStrokeWidth: CGFloat = oStrokeWidth * 0.5
        let oDash: CGFloat = oLinePercent * 2.28 * rect.width
        let showOLine = oDash > 0
        let halfOBuffer: CGFloat = oBuffer * 0.5
        let oFrame = CGRect(x: halfOStrokeWidth + halfOBuffer, y: 15 + (-halfOStrokeWidth - (60 - rect.height)), width: rect.height - (oStrokeWidth + oBuffer), height: rect.width - (oStrokeWidth + oBuffer))

        if (showOLine) {
            //// Oval Drawing
            context.saveGState()
            context.translateBy(x: oFrame.minX, y: oFrame.minY)
            context.rotate(by: -90 * CGFloat.pi/180)

            let ovalPath = UIBezierPath(ovalIn: CGRect(x: -43, y: 0, width: oFrame.width, height: oFrame.height))
            gray.setStroke()
            ovalPath.lineWidth = oStrokeWidth
            ovalPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [oDash, 500])
            ovalPath.stroke()
            context.restoreGState()

            context.restoreGState()
        }
    }

    @objc dynamic public class func drawVerticalLine(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 60), resizing: ResizingBehavior = .aspectFit, lightGreen: UIColor = UIColor(red: 0.576, green: 0.678, blue: 0.639, alpha: 0.800), verticalLinePercent: CGFloat = 1, verticalLineFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 60)



        //// Variable Declarations
        let showVerticalLine = verticalLinePercent > 0
        let verticalLineWidth: CGFloat = verticalLineFrame.width
        let verticalLlineDash: CGFloat = (verticalLineFrame.height - verticalLineWidth) * verticalLinePercent

        //// Frames
        let frame = CGRect(x: verticalLineFrame.minX, y: verticalLineFrame.minY, width: verticalLineFrame.width, height: verticalLineFrame.height)


        if (showVerticalLine) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 7.5))
            bezierPath.addLine(to: CGPoint(x: 7.5, y: 507.5))
            lightGreen.setStroke()
            bezierPath.lineWidth = verticalLineWidth
            bezierPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [verticalLlineDash, 1000])
            bezierPath.stroke()
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHorizontalLine(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 15), resizing: ResizingBehavior = .aspectFit, lightGreen: UIColor = UIColor(red: 0.576, green: 0.678, blue: 0.639, alpha: 0.800), horizontalLinePercent: CGFloat = 1, horizontalLineFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 15)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 15)



        //// Variable Declarations
        let horizontalLineWidth: CGFloat = horizontalLineFrame.height
        let horizontalLineDash: CGFloat = (horizontalLineFrame.width - horizontalLineWidth) * horizontalLinePercent
        let showHorizontalLine = horizontalLineDash > 0

        //// Frames
        let frame = CGRect(x: horizontalLineFrame.minX, y: horizontalLineFrame.minY, width: horizontalLineFrame.width, height: horizontalLineFrame.height)


        if (showHorizontalLine) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 7.5, y: frame.minY + 0.50007 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: 507.5, y: 7.5), controlPoint1: CGPoint(x: frame.minX + 495.74, y: frame.minY + 0.50007 * frame.height), controlPoint2: CGPoint(x: 507.5, y: 7.5))
            lightGreen.setStroke()
            bezierPath.lineWidth = horizontalLineWidth
            bezierPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [horizontalLineDash, 1000])
            bezierPath.stroke()
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawXSymbol(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 74, height: 74), resizing: ResizingBehavior = .aspectFit, lightGreen: UIColor = UIColor(red: 0.576, green: 0.678, blue: 0.639, alpha: 0.800), darkGreen: UIColor = UIColor(red: 0.396, green: 0.494, blue: 0.455, alpha: 0.800), rect: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), leftLinePercent: CGFloat = 1, showLeftLine: Bool = false, rightLinePercent: CGFloat = 1, showRightLine: Bool = false, xStrokeWidth: CGFloat = 12) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 74, height: 74), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 74, y: resizedFrame.height / 74)



        //// Variable Declarations
        let leftDash: CGFloat = max(xStrokeWidth, sqrt(pow(rect.width, 2) + pow(rect.height, 2)) * (70.0 / 85.0) * leftLinePercent)
        let rightDash: CGFloat = max(xStrokeWidth, sqrt(pow(rect.width, 2) + pow(rect.height, 2)) * (70.0 / 85.0) * rightLinePercent)
        let xRadius: CGFloat = xStrokeWidth * 0.5

        if (showRightLine) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 29, y: 3, width: xStrokeWidth, height: rightDash), cornerRadius: xRadius)
            lightGreen.setFill()
            rectanglePath.fill()
        }


        if (showLeftLine) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 2, y: 30, width: leftDash, height: xStrokeWidth), cornerRadius: xRadius)
            darkGreen.setFill()
            rectangle2Path.fill()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawErase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300), resizing: ResizingBehavior = .aspectFit, backgroundColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000), erasePercent: CGFloat = 1, eraseFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 300)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 300), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 300)



        //// Variable Declarations
        let eraseScale: CGFloat = eraseFrame.width * eraseFrame.height / 89700.0
        let eraseLineLength: CGFloat = erasePercent * (eraseScale * 325 * 10)

        //// Frames
        let frame = CGRect(x: eraseFrame.minX, y: eraseFrame.minY, width: eraseFrame.width, height: eraseFrame.height)


        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 33, y: frame.minY + 27)
        context.scaleBy(x: eraseScale, y: eraseScale)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -23.92, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 250.16, y: -0), controlPoint1: CGPoint(x: 121.04, y: 1.64), controlPoint2: CGPoint(x: 250.16, y: -0))
        bezierPath.addLine(to: CGPoint(x: -23.92, y: 49.83))
        bezierPath.addLine(to: CGPoint(x: 257.14, y: 61.79))
        bezierPath.addLine(to: CGPoint(x: 0, y: 97))
        bezierPath.addLine(to: CGPoint(x: 250.16, y: 123.59))
        bezierPath.addLine(to: CGPoint(x: -23.92, y: 142.52))
        bezierPath.addLine(to: CGPoint(x: 250.16, y: 178.4))
        bezierPath.addLine(to: CGPoint(x: -11.96, y: 195.35))
        bezierPath.addLine(to: CGPoint(x: 257.14, y: 235.21))
        bezierPath.addLine(to: CGPoint(x: 0, y: 235))
        bezierPath.addLine(to: CGPoint(x: 233, y: 261))
        bezierPath.addLine(to: CGPoint(x: -23.92, y: 269.1))
        backgroundColor.setStroke()
        bezierPath.lineWidth = 70
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        context.saveGState()
        context.setLineDash(phase: 0, lengths: [eraseLineLength, 4000])
        bezierPath.stroke()
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(DrawerResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
