//
//  Drawer.swift
//  TicTacToe
//
//  Created by Kevin Rejko on 9/3/17.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Drawer : NSObject {

    //// Cache

    private struct Cache {
        static let gray: UIColor = UIColor(red: 0.400, green: 0.400, blue: 0.400, alpha: 1.000)
        static let lightGreen: UIColor = UIColor(red: 0.576, green: 0.678, blue: 0.639, alpha: 0.800)
        static let darkGreen: UIColor = UIColor(red: 0.396, green: 0.494, blue: 0.455, alpha: 0.800)
    }

    //// Colors

    @objc dynamic public class var gray: UIColor { return Cache.gray }
    @objc dynamic public class var lightGreen: UIColor { return Cache.lightGreen }
    @objc dynamic public class var darkGreen: UIColor { return Cache.darkGreen }

    //// Drawing Methods

    @objc dynamic public class func drawX(rect: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), left_length: CGFloat = 1, right_length: CGFloat = 1, x_stroke_width: CGFloat = 15) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let left_dash: CGFloat = left_length * rect.width
        let show_left = left_dash > 0
        let right_dash: CGFloat = right_length * rect.width
        let show_right = right_dash > 0

        //// Frames
        let frame = CGRect(x: rect.minX, y: rect.minY, width: rect.width, height: rect.height)


        if (show_left) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: frame.minX + 0.14167 * frame.width, y: frame.minY + 0.15832 * frame.height))
            bezier4Path.addLine(to: CGPoint(x: frame.minX + 0.84167 * frame.width, y: frame.minY + 0.85832 * frame.height))
            Drawer.darkGreen.setStroke()
            bezier4Path.lineWidth = x_stroke_width
            bezier4Path.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [left_dash, 1000])
            bezier4Path.stroke()
            context.restoreGState()
        }


        if (show_right) {
            //// Bezier Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 29.5, y: frame.minY + 30.5)
            context.rotate(by: 90 * CGFloat.pi/180)

            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: -21, y: -21))
            bezierPath.addLine(to: CGPoint(x: 21, y: 21))
            Drawer.lightGreen.setStroke()
            bezierPath.lineWidth = x_stroke_width
            bezierPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [right_dash, 1000])
            bezierPath.stroke()
            context.restoreGState()

            context.restoreGState()
        }
    }

    @objc dynamic public class func drawO(rect: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), o_stroke_width: CGFloat = 12, o_length: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let o_dash: CGFloat = o_length * 2.28 * rect.width
        let show_o = o_dash > 0

        //// Frames
        let frame = CGRect(x: rect.minX, y: rect.minY, width: rect.width, height: rect.height)


        if (show_o) {
            //// Oval Drawing
            context.saveGState()
            context.translateBy(x: frame.minX + 0.50833 * frame.width, y: frame.minY + 0.49167 * frame.height)
            context.rotate(by: -90 * CGFloat.pi/180)

            let ovalPath = UIBezierPath(ovalIn: CGRect(x: -21.5, y: -21.5, width: 43, height: 43))
            Drawer.gray.setStroke()
            ovalPath.lineWidth = o_stroke_width
            ovalPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [o_dash, 500])
            ovalPath.stroke()
            context.restoreGState()

            context.restoreGState()
        }
    }

    @objc dynamic public class func drawVertical_line(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 60), resizing: ResizingBehavior = .aspectFit, vertical_line_length: CGFloat = 1, vertical_line_frame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 60)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 60)



        //// Variable Declarations
        let show_vertical_line = vertical_line_length > 0
        let vertical_line_width: CGFloat = vertical_line_frame.width
        let vertical_line_dash: CGFloat = (vertical_line_frame.height - vertical_line_width) * vertical_line_length

        //// Frames
        let frame = CGRect(x: vertical_line_frame.minX, y: vertical_line_frame.minY, width: vertical_line_frame.width, height: vertical_line_frame.height)


        if (show_vertical_line) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 7.5))
            bezierPath.addLine(to: CGPoint(x: 7.5, y: 507.5))
            Drawer.lightGreen.setStroke()
            bezierPath.lineWidth = vertical_line_width
            bezierPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [vertical_line_dash, 1000])
            bezierPath.stroke()
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHorizontal_line(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 15), resizing: ResizingBehavior = .aspectFit, horizontal_line_length: CGFloat = 1, horizontal_line_frame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 15)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 15)



        //// Variable Declarations
        let horizontal_line_width: CGFloat = horizontal_line_frame.height
        let horizontal_line_dash: CGFloat = (horizontal_line_frame.width - horizontal_line_width) * horizontal_line_length
        let show_horizontal_line = horizontal_line_dash > 0

        //// Frames
        let frame = CGRect(x: horizontal_line_frame.minX, y: horizontal_line_frame.minY, width: horizontal_line_frame.width, height: horizontal_line_frame.height)


        if (show_horizontal_line) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 7.5, y: frame.minY + 0.50007 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: 507.5, y: 7.5), controlPoint1: CGPoint(x: frame.minX + 495.74, y: frame.minY + 0.50007 * frame.height), controlPoint2: CGPoint(x: 507.5, y: 7.5))
            Drawer.lightGreen.setStroke()
            bezierPath.lineWidth = horizontal_line_width
            bezierPath.lineCapStyle = .round
            context.saveGState()
            context.setLineDash(phase: 0, lengths: [horizontal_line_dash, 1000])
            bezierPath.stroke()
            context.restoreGState()
        }
        
        context.restoreGState()

    }




    @objc(DrawerResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
